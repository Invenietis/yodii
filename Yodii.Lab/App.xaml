<Application
    x:Class="Yodii.Lab.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Yodii.Lab"
    StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!--Attach Default Fluent Control's Theme-->
                <ResourceDictionary
                    Source="pack://application:,,,/Fluent;Component/Themes/Office2010/Silver.xaml" />
                <!-- Icon assets -->
                <ResourceDictionary
                    Source="Assets/ModernUiIconsDictionary.xaml" />
            </ResourceDictionary.MergedDictionaries>
            
            <!-- Converters -->
            
            <!-- For multibinding : returns the AND result of all child bindings. -->
            <local:BooleanAndConverter
                x:Key="BooleanAndConverter" />
            
            <!-- Returns Visible if 0, and Collapsed if not 0.
            Setting any ConverterParameter reverses this behavior. -->
            <local:IntegerToVisibilityConverter
                x:Key="IntegerToVisibilityConverter" />
            
            <!-- Returns the boolean inverse: false if true, true if false.-->
            <local:InverseBooleanConverter
                x:Key="InverseBooleanConverter" />
            
            <!-- Returns true if null, false if not null.
            Setting any ConverterParameter reverses this behavior. -->
            <local:NullToBoolValueConverter
                x:Key="NullToBoolValueConverter" />

            <!-- Returns true if value equals parameter, for any Enum value. -->
            <local:EnumToBooleanConverter
                x:Key="EnumToBooleanConverter" />

            <!-- Returns Visible if value is true, and Collapsed if value is false. -->
            <local:BooleanToVisibilityConverter
                x:Key="BooleanToVisibilityConverter"
                True="Visible"
                False="Collapsed" />

            <!-- Returns Collapsed if value is true, and Visible if value is false. -->
            <local:BooleanToVisibilityConverter
                x:Key="InverseBooleanToVisibilityConverter"
                True="Collapsed"
                False="Visible" />

            <!-- Returns false if value is 0, and true if value is not 0.
            Setting any ConverterParameter reverses this behavior. -->
            <local:IntegerToBoolConverter
                x:Key="IntegerToBoolConverter" />

            <!-- Returns Visible if value is null, and Collapsed if value is not null.
            Setting any ConverterParameter reverses this behavior. -->
            <local:NullToVisibilityValueConverter
                x:Key="NullToVisibilityValueConverter" />

            <!-- Remove/clear button -->
            <Style
                x:Key="RemoveButtonStyle"
                TargetType="{x:Type Button}">
                <Setter
                    Property="FontFamily"
                    Value="Webdings" />
                <Setter
                    Property="Foreground"
                    Value="Red" />
                <Setter
                    Property="VerticalAlignment"
                    Value="Center" />
                <Setter
                    Property="HorizontalAlignment"
                    Value="Center" />
                <Setter
                    Property="FontWeight"
                    Value="Bold" />
                <Setter
                    Property="FontSize"
                    Value="12pt" />
                <Setter
                    Property="Content"
                    Value="r" />
            </Style>
            <!-- Property panel - basic property grid -->
            <Style
                x:Key="PropertyGridStyle"
                TargetType="Grid">
                <Setter
                    Property="Margin"
                    Value="0,3pt" />
            </Style>
            <!-- Property panel - property content cell border -->
            <Style
                x:Key="PropertyBorderStyle"
                TargetType="Border">
                <Setter
                    Property="Padding"
                    Value="0,2pt" />
            </Style>
            <!-- Property panel - panel title -->
            <Style
                x:Key="PropertyPanelTitleStyle"
                TargetType="TextBlock">
                <Setter
                    Property="FontSize"
                    Value="10pt" />
                <Setter
                    Property="VerticalAlignment"
                    Value="Center" />
                <Setter
                    Property="FontWeight"
                    Value="Bold" />
            </Style>
            <!-- Property panel - property name -->
            <Style
                x:Key="PropertyNameStyle"
                TargetType="TextBlock">
                <Setter
                    Property="VerticalAlignment"
                    Value="Center" />
                <Setter
                    Property="FontWeight"
                    Value="Bold" />
                <Setter
                    Property="Margin"
                    Value="0,0,5pt,0" />
            </Style>
            <!-- Property panel - horizontal separator -->
            <Style
                x:Key="RectangleHorizontalSeparatorStyle"
                TargetType="Rectangle">
                <Setter
                    Property="Margin"
                    Value="1pt,3pt" />
                <Setter
                    Property="Height"
                    Value="1pt" />
                <Setter
                    Property="HorizontalAlignment"
                    Value="Stretch" />
                <Setter
                    Property="Fill"
                    Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
